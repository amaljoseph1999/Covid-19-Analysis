

library("shiny")
library("shinydashboard")
library("tidyverse")
library("leaflet")
library("plotly")
library("DT")
library("fs")

library('wbstats')

data_confirmed<-read.csv("C:/Users/ArulSamy/Downloads/COVID-19-master/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",sep=',', head=TRUE,check.names =FALSE )
data_deceased<-read.csv("C:/Users/ArulSamy/Downloads/COVID-19-master/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv",sep=',', head=TRUE,check.names =FALSE)
data_recovered<-read.csv("C:/Users/ArulSamy/Downloads/COVID-19-master/COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv",sep=',', head=TRUE,check.names =FALSE)
##View(data_con)

current_date <- as.Date(names(data_confirmed)[ncol(data_confirmed)], format = "%m/%d/%y")
changed_date <- file_info("data/covid19_data.zip")$change_time

# Get evolution data by country
data_confirmed_sub <- data_confirmed %>%
    pivot_longer(names_to = "date", cols = 5:ncol(data_confirmed)) %>%
    group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
    summarise("confirmed" = sum(value, na.rm = T))
data_recovered_sub <- data_recovered %>%
    pivot_longer(names_to = "date", cols = 5:ncol(data_recovered)) %>%
    group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
    summarise("recovered" = sum(value, na.rm = T))

data_deceased_sub <- data_deceased %>%
    pivot_longer(names_to = "date", cols = 5:ncol(data_deceased)) %>%
    group_by(`Province/State`, `Country/Region`, date, Lat, Long) %>%
    summarise("deceased" = sum(value, na.rm = T))

data_evolution <- data_confirmed_sub %>%
    full_join(data_deceased_sub) %>%
    ungroup() %>%
    mutate(date = as.Date(date, "%m/%d/%y")) %>%
    arrange(date) %>%
    group_by(`Province/State`, `Country/Region`, Lat, Long) %>%
    mutate(
        recovered = lag(confirmed, 14, default = 0) - deceased,
        recovered = ifelse(recovered > 0, recovered, 0),
        active = confirmed - recovered - deceased
    ) %>%
    pivot_longer(names_to = "var", cols = c(confirmed, recovered, deceased, active)) %>%
    ungroup()

# Calculating new cases
data_evolution <- data_evolution %>%
    group_by(`Province/State`, `Country/Region`) %>%
    mutate(value_new = value - lag(value, 4, default = 0)) %>%
    ungroup()



ui <- fluidPage(
    titlePanel(title = h4("AQIWEEKLY",align="center")),
    
    fluidRow(
        column(3,
               selectInput("Cities",
                           h3("City"),
                           choices=c("Jaipur",
                                     "Lucknow",
                                     "Amrithsar",
                                     "Chennai",
                                     "Delhi",
                                     "Gurugram",
                                     "Hyderabad",
                                     "Jaipur"),
                           selected="Lucknow")),
        
        
        column(3,dateInput("start_date",
                           h3("Select Date"),
                           format = "yyyy-mm-dd",
                           value="2020-01-01",
                           min="2020-01-01",
                           max="2020-12-1")),
        column(3,
               dateInput("end_date",
                         h3("End Date"),
                         format="yyyy-mm-dd",
                         value="2020-03-30",
                         min="2020-01-01",
                         max="2020-12-1"))
        
    ),
    
    mainPanel(box(width = "100%",height = "400px",
        plotOutput("Plot4")),
        uiOutput("selectize_forline")
    )
)




server <-function(input,output){
    
    
    output$Plot2<-renderPlot({
        
        x<-data_confirmed_sub    
        x$date=strptime(x$date, "%m/%d/%y")
        x$date<-as.Date(x$date, "%m/%d/%Y")
        a<-x %>% filter(`Country/Region`==input$caseEvolution_country)
        a<-a %>% filter(date>input$start_date & date<input$end_date)
        
        ggplot(a, aes(x =date , y = confirmed)) +
            geom_bar(fill="#00AFBB",
            
                stat = "identity", position = position_stack()
            )+ggtitle(paste("Country :",input$caseEvolution_country)) 
        
    })
    
    
    output$Plot3<-renderPlot({
        
        x<-data_deceased_sub    
        x$date=strptime(x$date, "%m/%d/%y")
        x$date<-as.Date(x$date, "%m/%d/%Y")
        a<-x %>% filter(`Country/Region`==input$caseEvolution_country)
        a<-a %>% filter(date>input$start_date & date<input$end_date)
        
        ggplot(a, aes(x =date , y = deceased)) +
            geom_bar(fill="#00AFBB",
                
                stat = "identity", position = position_stack()
            )+ggtitle(paste("Country :",input$caseEvolution_country)) 
        })
    
    
    output$Plot4<-renderPlot({
        
        x<-data_confirmed_sub   
        x$date=strptime(x$date, "%m/%d/%y")
        x$date<-as.Date(x$date, "%m/%d/%Y")
        a<-x %>% filter(`Country/Region` %in% input$caseEvolution_country)
        a<-a %>% filter(date>input$start_date & date<input$end_date)
        
        ggplot(a, aes(x =date , y = confirmed,group=`Country/Region`)) +
            geom_line(aes(colour=`Country/Region`),size=1) 
    })
    
    
    
    

    
    output$selectize_forline<- renderUI({
        selectizeInput(
            "caseEvolution_country",
            label    = "Select Countries",
            choices  = unique(data_evolution$`Country/Region`),
            selected=c("India","US"),
            multiple = TRUE
        )
    })
    
    
    
    
}

# Run the application 
shinyApp(ui = ui, server = server)
